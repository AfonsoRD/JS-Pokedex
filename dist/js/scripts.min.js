let pokemonRepository = (function () {
  let e = [],
    t = document.querySelector('.loading');
  function n() {
    return e;
  }
  function o(t) {
    'object' == typeof t && 'name' in t && 'detailsUrl' in t
      ? e.push(t)
      : document.write('Pokemon is not valid');
  }
  function i(e) {
    return (
      showLoadingMessage(),
      fetch(e.detailsUrl)
        .then(function (e) {
          return hideLoadingMessage(), e.json();
        })
        .then(function (t) {
          (e.imageUrl = t.sprites.front_default),
            (e.id = t.id),
            (e.height = t.height),
            (e.weight = t.weight),
            (e.types = t.types.map((e) => e.type.name).join(', '));
        })
        .catch(function (e) {
          hideLoadingMessage(), console.error(e);
        })
    );
  }
  function a(e) {
    i(e).then(function () {
      l(e);
    });
  }
  function l(e) {
    let t = $('.modal-body'),
      n = $('.modal-title');
    n.empty(), t.empty();
    let o = $(
        '<h1>' +
          e.id +
          '# ' +
          e.name.charAt(0).toUpperCase() +
          e.name.slice(1) +
          '</h1>'
      ),
      i = $('<img class="modal-img" style="width:50%">');
    i.attr('src', e.imageUrl);
    let a = $('<p>Height: ' + e.height + '</p>'),
      l = $('<p>Weight: ' + e.weight + '</p>'),
      s = $(
        '<p>Type: ' +
          e.types.charAt(0).toUpperCase() +
          e.types.slice(1) +
          '</p>'
      );
    n.append(o), t.append(i), t.append(a), t.append(l), t.append(s);
  }
  return (
    (showLoadingMessage = () => {
      t.style.display = 'block';
    }),
    (hideLoadingMessage = () => {
      t.style.display = 'none';
    }),
    document.getElementById('search-bar').addEventListener('keyup', () => {
      !(function e() {
        let t = document.querySelectorAll('.card'),
          n = document.getElementById('search-bar').value;
        for (var o = 0; o < t.length; o++)
          t[o].innerText.toLowerCase().includes(n.toLowerCase())
            ? t[o].classList.remove('is-hidden')
            : t[o].classList.add('is-hidden');
      })();
    }),
    {
      getAll: n,
      add: o,
      addListItem: function e(t) {
        pokemonRepository.loadDetails(t).then(function () {
          let e = $('.pokemon-list'),
            n = $('<div class="card" style="width:250px"></div>'),
            o = $('<img class="card-img" alt="Card image" />');
          o.attr('src', t.imageUrl);
          let i = $(
              '<h5 class="card-title;">' +
                t.name.charAt(0).toUpperCase() +
                t.name.slice(1) +
                '</h5>'
            ),
            l = $('<div class="card-body" style= height:60%"></div>'),
            s = $(
              '<button type="button" class="button" data-toggle="modal" data-target="#pokemon-modal">Details</button>'
            );
          e.append(n),
            n.append(o),
            n.append(i),
            n.append(l),
            l.append(s),
            s.on('click', () => {
              a(t);
            }),
            n.on('click', () => {
              a(t);
            });
        });
      },
      showDetails: a,
      loadList: function e() {
        return (
          showLoadingMessage(),
          fetch('https://pokeapi.co/api/v2/pokemon/?limit=1154')
            .then(function (e) {
              return hideLoadingMessage(), e.json();
            })
            .then(function (e) {
              e.results.forEach(function (e) {
                o({ name: e.name, detailsUrl: e.url });
              });
            })
            .catch(function (e) {
              hideLoadingMessage(), console.error(e);
            })
        );
      },
      loadDetails: i,
      showModal: l
    }
  );
})();
pokemonRepository.loadList().then(function () {
  pokemonRepository.getAll().forEach(function (e) {
    pokemonRepository.addListItem(e);
  });
});
